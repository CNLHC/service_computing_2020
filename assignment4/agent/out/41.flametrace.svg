<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (643,002,422 samples, 14.38%)</title><rect x="1020.3" y="341" width="169.7" height="15.0" fill="rgb(254,202,0)" rx="2" ry="2" />
<text  x="1023.26" y="351.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocolPB.PBHelperClient.vintPrefixed(PBHelperClient.java:407) (2,537,879,019 samples, 56.78%)</title><rect x="13.8" y="341" width="669.9" height="15.0" fill="rgb(240,16,42)" rx="2" ry="2" />
<text  x="16.79" y="351.5" >org.apache.hadoop.hdfs.protocolPB.PBHelperClient.vintPrefixed(PBHelperClient.java:407)</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (634,536,691 samples, 14.20%)</title><rect x="516.2" y="261" width="167.5" height="15.0" fill="rgb(241,174,40)" rx="2" ry="2" />
<text  x="519.24" y="271.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>java.io.FilterInputStream.read(FilterInputStream.java:107) (2,139,388 samples, 0.05%)</title><rect x="10.1" y="149" width="0.6" height="15.0" fill="rgb(242,12,26)" rx="2" ry="2" />
<text  x="13.12" y="159.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (2,891,200 samples, 0.06%)</title><rect x="13.0" y="325" width="0.8" height="15.0" fill="rgb(246,122,49)" rx="2" ry="2" />
<text  x="16.02" y="335.5" ></text>
</g>
<g >
<title>com.google.protobuf.CodedInputStream.refillBuffer(CodedInputStream.java:737) (2,139,388 samples, 0.05%)</title><rect x="10.1" y="165" width="0.6" height="15.0" fill="rgb(226,166,54)" rx="2" ry="2" />
<text  x="13.12" y="175.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (637,825,359 samples, 14.27%)</title><rect x="851.3" y="341" width="168.4" height="15.0" fill="rgb(229,15,26)" rx="2" ry="2" />
<text  x="854.31" y="351.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (1,950,567 samples, 0.04%)</title><rect x="10.7" y="181" width="0.5" height="15.0" fill="rgb(244,66,12)" rx="2" ry="2" />
<text  x="13.68" y="191.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (2,114,490 samples, 0.05%)</title><rect x="11.2" y="213" width="0.6" height="15.0" fill="rgb(240,130,45)" rx="2" ry="2" />
<text  x="14.20" y="223.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocolPB.PBHelperClient.vintPrefixed(PBHelperClient.java:415) (634,776,456 samples, 14.20%)</title><rect x="683.7" y="341" width="167.6" height="15.0" fill="rgb(250,157,18)" rx="2" ry="2" />
<text  x="686.74" y="351.5" >org.apache.hadoop.hdf..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (2,114,490 samples, 0.05%)</title><rect x="11.2" y="197" width="0.6" height="15.0" fill="rgb(207,203,36)" rx="2" ry="2" />
<text  x="14.20" y="207.5" ></text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (634,398,738 samples, 14.19%)</title><rect x="348.8" y="245" width="167.4" height="15.0" fill="rgb(228,23,30)" rx="2" ry="2" />
<text  x="351.77" y="255.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>all (4,469,976,117 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(246,226,38)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>com.google.protobuf.CodedInputStream.readTag(CodedInputStream.java:99) (2,139,388 samples, 0.05%)</title><rect x="10.1" y="197" width="0.6" height="15.0" fill="rgb(211,178,13)" rx="2" ry="2" />
<text  x="13.12" y="207.5" ></text>
</g>
<g >
<title>com.google.protobuf.AbstractParser.parsePartialFrom(AbstractParser.java:200) (11,001,739 samples, 0.25%)</title><rect x="10.1" y="277" width="2.9" height="15.0" fill="rgb(230,178,9)" rx="2" ry="2" />
<text  x="13.12" y="287.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (634,767,536 samples, 14.20%)</title><rect x="683.7" y="325" width="167.6" height="15.0" fill="rgb(213,205,41)" rx="2" ry="2" />
<text  x="686.75" y="335.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:126) (634,536,691 samples, 14.20%)</title><rect x="516.2" y="293" width="167.5" height="15.0" fill="rgb(249,77,21)" rx="2" ry="2" />
<text  x="519.24" y="303.5" >org.apache.hadoop.net..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (2,306,465 samples, 0.05%)</title><rect x="11.8" y="213" width="0.6" height="15.0" fill="rgb(250,187,5)" rx="2" ry="2" />
<text  x="14.76" y="223.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (2,489,129 samples, 0.06%)</title><rect x="12.4" y="245" width="0.6" height="15.0" fill="rgb(210,110,42)" rx="2" ry="2" />
<text  x="15.37" y="255.5" ></text>
</g>
<g >
<title>java.io.FilterInputStream.read(FilterInputStream.java:83) (2,537,879,019 samples, 56.78%)</title><rect x="13.8" y="325" width="669.9" height="15.0" fill="rgb(229,96,20)" rx="2" ry="2" />
<text  x="16.79" y="335.5" >java.io.FilterInputStream.read(FilterInputStream.java:83)</text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (582,875 samples, 0.01%)</title><rect x="13.9" y="197" width="0.2" height="15.0" fill="rgb(239,1,31)" rx="2" ry="2" />
<text  x="16.92" y="207.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:161) (437,108 samples, 0.01%)</title><rect x="10.1" y="69" width="0.1" height="15.0" fill="rgb(243,86,10)" rx="2" ry="2" />
<text  x="13.12" y="79.5" ></text>
</g>
<g >
<title>java.io.DataInputStream.read(DataInputStream.java:149) (1,152,305 samples, 0.03%)</title><rect x="10.1" y="117" width="0.3" height="15.0" fill="rgb(211,197,6)" rx="2" ry="2" />
<text  x="13.12" y="127.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck.readFields(PipelineAck.java:213) (3,186,690,008 samples, 71.29%)</title><rect x="10.1" y="357" width="841.2" height="15.0" fill="rgb(249,106,23)" rx="2" ry="2" />
<text  x="13.08" y="367.5" >org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck.readFields(PipelineAck.java:213)</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (634,767,536 samples, 14.20%)</title><rect x="683.7" y="309" width="167.6" height="15.0" fill="rgb(246,191,16)" rx="2" ry="2" />
<text  x="686.75" y="319.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (634,250,423 samples, 14.19%)</title><rect x="181.3" y="245" width="167.5" height="15.0" fill="rgb(244,182,13)" rx="2" ry="2" />
<text  x="184.33" y="255.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (987,083 samples, 0.02%)</title><rect x="10.4" y="101" width="0.3" height="15.0" fill="rgb(241,83,49)" rx="2" ry="2" />
<text  x="13.42" y="111.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos$PipelineAckProto.&lt;init&gt;(DataTransferProtos.java:18508) (6,206,145 samples, 0.14%)</title><rect x="10.1" y="229" width="1.7" height="15.0" fill="rgb(208,132,19)" rx="2" ry="2" />
<text  x="13.12" y="239.5" ></text>
</g>
<g >
<title>org.apache.hadoop.util.LimitInputStream.read(LimitInputStream.java:89) (987,083 samples, 0.02%)</title><rect x="10.4" y="133" width="0.3" height="15.0" fill="rgb(245,113,6)" rx="2" ry="2" />
<text  x="13.42" y="143.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool.select(SocketIOWithTimeout.java:325) (432,391 samples, 0.01%)</title><rect x="13.8" y="229" width="0.1" height="15.0" fill="rgb(218,28,12)" rx="2" ry="2" />
<text  x="16.80" y="239.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool.select(SocketIOWithTimeout.java:373) (634,195,994 samples, 14.19%)</title><rect x="13.9" y="229" width="167.4" height="15.0" fill="rgb(242,89,25)" rx="2" ry="2" />
<text  x="16.92" y="239.5" >org.apache.hadoop.net..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (2,489,129 samples, 0.06%)</title><rect x="12.4" y="229" width="0.6" height="15.0" fill="rgb(220,194,40)" rx="2" ry="2" />
<text  x="15.37" y="239.5" ></text>
</g>
<g >
<title>com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:217) (11,143,333 samples, 0.25%)</title><rect x="10.1" y="293" width="2.9" height="15.0" fill="rgb(254,121,42)" rx="2" ry="2" />
<text  x="13.08" y="303.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos$PipelineAckProto.&lt;init&gt;(DataTransferProtos.java:18637) (1,950,567 samples, 0.04%)</title><rect x="10.7" y="213" width="0.5" height="15.0" fill="rgb(248,152,4)" rx="2" ry="2" />
<text  x="13.68" y="223.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck.getStatusFromHeader(PipelineAck.java:226) (494,372 samples, 0.01%)</title><rect x="1019.8" y="357" width="0.2" height="15.0" fill="rgb(245,155,29)" rx="2" ry="2" />
<text  x="1022.83" y="367.5" ></text>
</g>
<g >
<title>com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:49) (11,143,333 samples, 0.25%)</title><rect x="10.1" y="325" width="2.9" height="15.0" fill="rgb(206,182,13)" rx="2" ry="2" />
<text  x="13.08" y="335.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos$PipelineAckProto.&lt;init&gt;(DataTransferProtos.java:18544) (2,139,388 samples, 0.05%)</title><rect x="10.1" y="213" width="0.6" height="15.0" fill="rgb(251,124,37)" rx="2" ry="2" />
<text  x="13.12" y="223.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck.readFields(PipelineAck.java:214) (637,825,359 samples, 14.27%)</title><rect x="851.3" y="357" width="168.4" height="15.0" fill="rgb(244,9,21)" rx="2" ry="2" />
<text  x="854.31" y="367.5" >org.apache.hadoop.hdf..</text>
</g>
<g >
<title>org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1080) (3,824,515,677 samples, 85.56%)</title><rect x="10.1" y="373" width="1009.6" height="15.0" fill="rgb(210,221,3)" rx="2" ry="2" />
<text  x="13.08" y="383.5" >org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1080)</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (634,250,423 samples, 14.19%)</title><rect x="181.3" y="229" width="167.5" height="15.0" fill="rgb(242,142,12)" rx="2" ry="2" />
<text  x="184.33" y="239.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:118) (1,903,342,328 samples, 42.58%)</title><rect x="13.8" y="293" width="502.4" height="15.0" fill="rgb(221,37,6)" rx="2" ry="2" />
<text  x="16.79" y="303.5" >org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (715,197 samples, 0.02%)</title><rect x="10.2" y="53" width="0.2" height="15.0" fill="rgb(252,147,23)" rx="2" ry="2" />
<text  x="13.23" y="63.5" ></text>
</g>
<g >
<title>com.google.protobuf.CodedInputStream.isAtEnd(CodedInputStream.java:701) (2,139,388 samples, 0.05%)</title><rect x="10.1" y="181" width="0.6" height="15.0" fill="rgb(238,72,48)" rx="2" ry="2" />
<text  x="13.12" y="191.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (634,536,691 samples, 14.20%)</title><rect x="516.2" y="277" width="167.5" height="15.0" fill="rgb(222,145,9)" rx="2" ry="2" />
<text  x="519.24" y="287.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>com.google.protobuf.AbstractParser.parseFrom(AbstractParser.java:223) (11,143,333 samples, 0.25%)</title><rect x="10.1" y="309" width="2.9" height="15.0" fill="rgb(218,219,49)" rx="2" ry="2" />
<text  x="13.08" y="319.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1104) (676,417 samples, 0.02%)</title><rect x="1020.0" y="373" width="0.1" height="15.0" fill="rgb(224,161,50)" rx="2" ry="2" />
<text  x="1022.96" y="383.5" ></text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (2,891,200 samples, 0.06%)</title><rect x="13.0" y="309" width="0.8" height="15.0" fill="rgb(228,65,53)" rx="2" ry="2" />
<text  x="16.02" y="319.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos$PipelineAckProto$1.parsePartialFrom(DataTransferProtos.java:18656) (8,512,610 samples, 0.19%)</title><rect x="10.1" y="245" width="2.3" height="15.0" fill="rgb(218,14,37)" rx="2" ry="2" />
<text  x="13.12" y="255.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (1,950,567 samples, 0.04%)</title><rect x="10.7" y="197" width="0.5" height="15.0" fill="rgb(213,205,24)" rx="2" ry="2" />
<text  x="13.68" y="207.5" ></text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (582,875 samples, 0.01%)</title><rect x="13.9" y="181" width="0.2" height="15.0" fill="rgb(233,30,14)" rx="2" ry="2" />
<text  x="16.92" y="191.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:161) (1,268,943,590 samples, 28.39%)</title><rect x="13.8" y="261" width="335.0" height="15.0" fill="rgb(248,40,19)" rx="2" ry="2" />
<text  x="16.79" y="271.5" >org.apache.hadoop.net.SocketInputStream.read(..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (633,611,389 samples, 14.17%)</title><rect x="14.1" y="197" width="167.2" height="15.0" fill="rgb(226,169,2)" rx="2" ry="2" />
<text  x="17.07" y="207.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (634,398,738 samples, 14.19%)</title><rect x="348.8" y="261" width="167.4" height="15.0" fill="rgb(213,20,24)" rx="2" ry="2" />
<text  x="351.77" y="271.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>org.apache.hadoop.net.SocketIOWithTimeout.doIO(SocketIOWithTimeout.java:157) (634,628,905 samples, 14.20%)</title><rect x="13.8" y="245" width="167.5" height="15.0" fill="rgb(242,212,24)" rx="2" ry="2" />
<text  x="16.80" y="255.5" >org.apache.hadoop.net..</text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (431,281 samples, 0.01%)</title><rect x="13.8" y="197" width="0.1" height="15.0" fill="rgb(212,94,4)" rx="2" ry="2" />
<text  x="16.80" y="207.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (643,002,422 samples, 14.38%)</title><rect x="1020.3" y="357" width="169.7" height="15.0" fill="rgb(236,5,51)" rx="2" ry="2" />
<text  x="1023.26" y="367.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos$PipelineAckProto$1.parsePartialFrom(DataTransferProtos.java:18651) (11,001,739 samples, 0.25%)</title><rect x="10.1" y="261" width="2.9" height="15.0" fill="rgb(210,160,30)" rx="2" ry="2" />
<text  x="13.12" y="271.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:131) (1,903,342,328 samples, 42.58%)</title><rect x="13.8" y="277" width="502.4" height="15.0" fill="rgb(241,222,10)" rx="2" ry="2" />
<text  x="16.79" y="287.5" >org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (431,281 samples, 0.01%)</title><rect x="13.8" y="181" width="0.1" height="15.0" fill="rgb(237,68,20)" rx="2" ry="2" />
<text  x="16.80" y="191.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool.get(SocketIOWithTimeout.java:418) (431,281 samples, 0.01%)</title><rect x="13.8" y="213" width="0.1" height="15.0" fill="rgb(239,28,7)" rx="2" ry="2" />
<text  x="16.80" y="223.5" ></text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (637,825,359 samples, 14.27%)</title><rect x="851.3" y="325" width="168.4" height="15.0" fill="rgb(253,117,45)" rx="2" ry="2" />
<text  x="854.31" y="335.5" >java.lang.Thread.getS..</text>
</g>
<g >
<title>org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1201) (643,002,422 samples, 14.38%)</title><rect x="1020.3" y="373" width="169.7" height="15.0" fill="rgb(206,154,51)" rx="2" ry="2" />
<text  x="1023.26" y="383.5" >org.apache.hadoop.hdf..</text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.datatransfer.PipelineAck.getECNFromHeader(PipelineAck.java:230) (485,322 samples, 0.01%)</title><rect x="1020.0" y="357" width="0.1" height="15.0" fill="rgb(237,67,39)" rx="2" ry="2" />
<text  x="1022.96" y="367.5" ></text>
</g>
<g >
<title>java.io.FilterInputStream.read(FilterInputStream.java:133) (1,152,305 samples, 0.03%)</title><rect x="10.1" y="101" width="0.3" height="15.0" fill="rgb(240,143,15)" rx="2" ry="2" />
<text  x="13.12" y="111.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.DataStreamer$ResponseProcessor.run(DataStreamer.java:1102) (687,427 samples, 0.02%)</title><rect x="1019.8" y="373" width="0.2" height="15.0" fill="rgb(242,140,23)" rx="2" ry="2" />
<text  x="1022.78" y="383.5" ></text>
</g>
<g >
<title>java.io.FilterInputStream.read(FilterInputStream.java:83) (2,537,879,019 samples, 56.78%)</title><rect x="13.8" y="309" width="669.9" height="15.0" fill="rgb(224,170,31)" rx="2" ry="2" />
<text  x="16.79" y="319.5" >java.io.FilterInputStream.read(FilterInputStream.java:83)</text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (987,083 samples, 0.02%)</title><rect x="10.4" y="117" width="0.3" height="15.0" fill="rgb(232,153,28)" rx="2" ry="2" />
<text  x="13.42" y="127.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketInputStream.read(SocketInputStream.java:131) (1,152,305 samples, 0.03%)</title><rect x="10.1" y="85" width="0.3" height="15.0" fill="rgb(231,149,29)" rx="2" ry="2" />
<text  x="13.12" y="95.5" ></text>
</g>
<g >
<title>org.apache.hadoop.hdfs.protocol.proto.DataTransferProtos$PipelineAckProto.parseFrom(DataTransferProtos.java:18916) (14,034,533 samples, 0.31%)</title><rect x="10.1" y="341" width="3.7" height="15.0" fill="rgb(232,88,38)" rx="2" ry="2" />
<text  x="13.08" y="351.5" ></text>
</g>
<g >
<title>org.apache.hadoop.util.LimitInputStream.read(LimitInputStream.java:85) (1,152,305 samples, 0.03%)</title><rect x="10.1" y="133" width="0.3" height="15.0" fill="rgb(214,132,23)" rx="2" ry="2" />
<text  x="13.12" y="143.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (403,718 samples, 0.01%)</title><rect x="10.1" y="53" width="0.1" height="15.0" fill="rgb(221,81,25)" rx="2" ry="2" />
<text  x="13.13" y="63.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (633,611,389 samples, 14.17%)</title><rect x="14.1" y="213" width="167.2" height="15.0" fill="rgb(232,80,12)" rx="2" ry="2" />
<text  x="17.07" y="223.5" >xyz.cnworkshop.Profil..</text>
</g>
<g >
<title>java.lang.Thread.getStackTrace(Thread.java:1559) (403,718 samples, 0.01%)</title><rect x="10.1" y="37" width="0.1" height="15.0" fill="rgb(213,23,22)" rx="2" ry="2" />
<text  x="13.13" y="47.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (2,306,465 samples, 0.05%)</title><rect x="11.8" y="229" width="0.6" height="15.0" fill="rgb(214,178,41)" rx="2" ry="2" />
<text  x="14.76" y="239.5" ></text>
</g>
<g >
<title>xyz.cnworkshop.Profilier.report(Profilier.java:56) (715,197 samples, 0.02%)</title><rect x="10.2" y="69" width="0.2" height="15.0" fill="rgb(248,10,51)" rx="2" ry="2" />
<text  x="13.23" y="79.5" ></text>
</g>
<g >
<title>org.apache.hadoop.net.SocketIOWithTimeout$SelectorPool.release(SocketIOWithTimeout.java:432) (582,875 samples, 0.01%)</title><rect x="13.9" y="213" width="0.2" height="15.0" fill="rgb(217,77,1)" rx="2" ry="2" />
<text  x="16.92" y="223.5" ></text>
</g>
</g>
</svg>
